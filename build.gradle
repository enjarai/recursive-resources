plugins {
    id 'fabric-loom' version '1.9-SNAPSHOT'
    id 'maven-publish'
    id 'me.fallenbreath.yamlang' version '1.3.1'
    id "me.modmuss50.mod-publish-plugin" version "0.8.1"
}

sourceCompatibility = JavaVersion.VERSION_21
targetCompatibility = JavaVersion.VERSION_21

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        url "https://maven.enjarai.dev/releases"
    }
    maven {
        url "https://maven.enjarai.dev/mirrors"
    }

    maven {
        name "Terraformers Maven"
        url 'https://maven.terraformersmc.com'
    }
}

dependencies {
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    modImplementation "com.terraformersmc:modmenu:${project.modmenu_version}"

    modImplementation include("nl.enjarai:shared-resources-api:${project.shared_resources_version}")

    modImplementation("nl.enjarai:cicada-lib:${project.cicada_version}") {
        exclude group: "net.fabricmc.fabric-api"
    }
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

version = "$version+$minecraft_version"

// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
}

jar {
    from "LICENSE"
}

loom {
	accessWidenerPath = file("src/main/resources/recursiveresources.accesswidener")
}

publishing {
    repositories {
        maven {
            name = "enjaraiMaven"
            url = "https://maven.enjarai.dev/releases"
            credentials(PasswordCredentials)
            authentication {
                basic(BasicAuthentication)
            }
        }
    }

    publications {
        mavenJava(MavenPublication) {
            groupId = project.maven_group
            artifactId = archivesBaseName
            version = project.version

            from components.java
        }
    }
}

yamlang {
    targetSourceSets = [sourceSets.main]
    inputDir = 'assets/recursiveresources/lang'
}

publishMods {
    file = remapJar.archiveFile
    displayName = "${property('mod_version')} for ${property('minecraft_version')}"
    version = project.version
    changelog = getRootProject().file("CHANGELOG.md").text
    type = STABLE
    modLoaders.add("fabric")

    def min = property('publish_target_min')
    def max = property('publish_target_max')

    if (providers.gradleProperty('enjaraiModrinthToken').present) {
        modrinth {
            projectId = property('mod_modrinth')
            accessToken = providers.gradleProperty('enjaraiModrinthToken').get()

            if (min == max) {
                minecraftVersions.add(min)
            } else {
                minecraftVersionRange {
                    start = min
                    end = max
                }
            }

            requires {
                slug = "fabric-api"
            }
            requires {
                slug = "cicada"
            }
        }
    }

    if (providers.gradleProperty('enjaraiCurseforgeToken').present) {
        curseforge {
            projectId = property('mod_curseforge')
            accessToken = providers.gradleProperty('enjaraiCurseforgeToken').get()

            if (min == max) {
                minecraftVersions.add(min)
            } else {
                minecraftVersionRange {
                    start = min
                    end = max
                }
            }

            requires {
                slug = "fabric-api"
            }
            requires {
                slug = "cicada"
            }
        }
    }

    if (providers.gradleProperty('enjaraiGithubToken').present) {
        github {
            repository = property('mod_github')
            accessToken = providers.gradleProperty('enjaraiGithubToken').get()

            commitish = property('git_branch')
            tagName = project.version
        }
    }
}
